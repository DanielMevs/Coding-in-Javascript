Hoisting in Javascript

Execution Context
L> Variable environment
L> Scope chain
L> this keyword

Variable environment

Hoisting: makes some types of
variables accessible/usable in
the code before they are actually
declared. "Variable lifted to the
top of their scope."

BEHIND THE SCENES
l> Before execution, code is
scanned for variable declarations,
and for each variable, a new 
property is created in the 
variable environment object.
L> Happens within the creation
phase of the execution context.

Function declarations
L> Hoisted? Yes
L> Initial value -> actual Function
L> Scope -> Block (strict mode)

var variables
L> Hoisted? Yes
L> Initial value -> undefined
L> Scope -> Function

let and const variables
L> Hoisted? -> No
L> Initial value: <uninitialized>, TDZ
L> Scope -> Block

Function expressions and arrows
L> Hoisted -> depends on if using var
or let/const
L> Initial value: depends on if using var
or let/const
L> Scope: depends on if using var
or let/const

Temporal Dead Zone, Let and Const
Why TDZ?
L> Makes it easier to avoid and 
catch errors: accessing variables
before declaration is bad practice
L> Makes const variable actually
work

Why Hoisting?
L> Using functions before actual
declaration.

